<?php

/**
 * Created by PhpStorm.
 * User: lerny
 * Date: 13/12/15
 * Time: 01:13 PM
 */
class CoreConfig extends CoreSingleton
{
    private $alreadyInit = false;
    private $config = array();

    /**
     * @return CoreConfig
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }

    /**
     * @return CoreConfig
     */
    public static function getConfig($only_public = false) {
        $config = self::getInstance();
        if(!$config->isAlreadyInit()) {
            $config->init($only_public);
        }
        return $config;
    }

    /**
     * @return boolean
     */
    public function isAlreadyInit()
    {
        return $this->alreadyInit;
    }

    /**
     * @return array
     */
    public function getData()
    {
        return $this->config;
    }

    public function init($only_public = false) {
        $this->alreadyInit = true;
        $db = CoreDb::getInstance();
        $result = $db->query("SELECT * FROM config");
        foreach($result as $value) {
            $pasar = true;
            if($only_public && $value["is_only_private"] == "1") {
                $pasar = false;
            }
            if($pasar) {
                $this->config[$value["etiqueta"]] = $value["valor"];
            }
        }
        $this->config["tipo_user"] = array(
            "admin" => _("Admin"),
            "usuario" => _("Vendedor")
        );
        $this->config["estado_user"] = array(
            "1" => _("Activo"),
            "0" => _("Inactivo")
        );
        $this->config["estado_cuota"] = array(
            "1" => _("Pagada"),
            "0" => _("Pendiente")
        );
        $this->config["estado_prestamo"] = array(
            "1" => _("Activo"),
            "0" => _("Inactivo"),
            "2" => _("Cancelado"),
            "3" => _("Finalizado")
        );
        $this->config["origen_pago"] = array(
            "cuota" => _("Cuota"),
            "nc" => _("Nota de CrÃ©dito"),
            "factura" => _("Factura")
        );
        $this->config["estado_pago"] = array(
            "1" => _("Aprobado"),
            "0" => _("Pendiente"),
            "2" => _("Rechazado"),
            "3" => _("Por Confirmar"),
            "4" => _("Reversado")
        );
        $this->config["estado_pago_form"] = array(
            "0" => _("Pendiente"),
            "3" => _("Por Confirmar")
        );
        $this->config["tipo_intervalo"] = array(
            "diario" => _("Diario"),
            "semanal" => _("Semanal"),
            "mensual" => _("Mensual"),
            "anual" => _("Anual")
        );
        $this->config["rate_cliente"] = array(
            "1" => _("Malo"),
            "0" => _("Neutral"),
            "2" => _("Regular"),
            "3" => _("Bueno"),
            "4" => _("Excelente")
        );
        $porcentaje = new ModuleConfiguracionEntityPorcentaje;
        $records = $porcentaje->findAll(array(
            array( "field"=> "estado", "comparacion"=> "=", "value"=>"1" )
        ));
        $this->config["porcentajes"] = $records["records"];
        $zonas = new ModuleConfiguracionEntityZona;
        $records = $zonas->findAll(array(
            array( "field"=> "estado", "comparacion"=> "=", "value"=>"1" )
        ));
        $this->config["zonas"] = $records["records"];
        $metodos = new ModuleConfiguracionEntityMetodo;
        $records = $metodos->findAll(array(
            array( "field"=> "estado", "comparacion"=> "=", "value"=>"1" )
        ));
        $this->config["metodos"] = $records["records"];
        $urls = array();
        ModuleApiConfig::getUrls($urls);
        ModuleUserConfig::getUrls($urls);
        ModuleLoginConfig::getUrls($urls);
        ModuleLoansConfig::getUrls($urls);
        ModuleConfiguracionConfig::getUrls($urls);
        $this->config["urls"] = json_encode($urls);

    }

}